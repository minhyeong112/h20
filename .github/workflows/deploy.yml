name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: 30m
        script: |
          cd h20
          echo "🔄 Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          echo "🔧 Generating environment file from template..."
          # Export all secrets as environment variables for the generator script
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}"
          export GOOGLE_KEY="${{ secrets.GOOGLE_KEY }}"
          export XAI_API_KEY="${{ secrets.XAI_API_KEY }}"
          export PERPLEXITY_API_KEY="${{ secrets.PERPLEXITY_API_KEY }}"
          export SERPER_API_KEY="${{ secrets.SERPER_API_KEY }}"
          export FIRECRAWL_API_KEY="${{ secrets.FIRECRAWL_API_KEY }}"
          export JINA_API_KEY="${{ secrets.JINA_API_KEY }}"
          export STT_API_KEY="${{ secrets.STT_API_KEY }}"
          export TTS_API_KEY="${{ secrets.TTS_API_KEY }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}"
          export CREDS_KEY="${{ secrets.CREDS_KEY }}"
          export CREDS_IV="${{ secrets.CREDS_IV }}"
          export MEILI_MASTER_KEY="${{ secrets.MEILI_MASTER_KEY }}"
          export DOMAIN_CLIENT="${{ secrets.DOMAIN_CLIENT }}"
          export DOMAIN_SERVER="${{ secrets.DOMAIN_SERVER }}"
          export ASSISTANTS_API_KEY="${{ secrets.ASSISTANTS_API_KEY }}"
          export OPENWEATHER_API_KEY="${{ secrets.OPENWEATHER_API_KEY }}"
          export LIBRECHAT_CODE_API_KEY="${{ secrets.LIBRECHAT_CODE_API_KEY }}"
          # Generate .env file using the template system
          if command -v node >/dev/null 2>&1; then
            echo "✅ Node.js found, using template system"
            node config/generate-env.js
          else
            echo "⚠️  Node.js not found, generating .env manually"
            cat > .env << 'EOF'
# =============================================================================
# LibreChat Environment Configuration
# Generated automatically - DO NOT EDIT MANUALLY
# =============================================================================

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

APP_TITLE=Vajra
CUSTOM_FOOTER="Vajra"
HELP_AND_FAQ_URL=
HOST=localhost
PORT=3080
MONGO_URI=mongodb://mongodb:27017/LibreChat
NO_INDEX=true
TRUST_PROXY=1
ENDPOINTS=openAI,anthropic,google,custom,agents
PROXY=
OPENAI_MODELS=gpt-5,gpt-5-chat-latest,gpt-4.1-2025-04-14,o3-deep-research-2025-06-26,o4-mini-deep-research-2025-06-26,gpt-4o-realtime-preview-2025-06-03
ANTHROPIC_MODELS=claude-opus-4-1-20250805,claude-sonnet-4-20250514
GOOGLE_MODELS=gemini-2.5-pro,gemini-2.5-flash-lite
ALLOW_EMAIL_LOGIN=true
ALLOW_REGISTRATION=true
ALLOW_SOCIAL_LOGIN=false
ALLOW_SOCIAL_REGISTRATION=false
ALLOW_PASSWORD_RESET=false
ALLOW_UNVERIFIED_EMAIL_LOGIN=true
SESSION_EXPIRY=1000 * 60 * 15
REFRESH_TOKEN_EXPIRY=1000 * 60 * 60 * 24 * 7
BAN_VIOLATIONS=true
BAN_DURATION=1000 * 60 * 60 * 2
BAN_INTERVAL=20
LOGIN_VIOLATION_SCORE=1
REGISTRATION_VIOLATION_SCORE=1
CONCURRENT_VIOLATION_SCORE=1
MESSAGE_VIOLATION_SCORE=1
NON_BROWSER_VIOLATION_SCORE=20
TTS_VIOLATION_SCORE=0
STT_VIOLATION_SCORE=0
FORK_VIOLATION_SCORE=0
IMPORT_VIOLATION_SCORE=0
FILE_UPLOAD_VIOLATION_SCORE=0
LOGIN_MAX=7
LOGIN_WINDOW=5
REGISTER_MAX=5
REGISTER_WINDOW=60
LIMIT_CONCURRENT_MESSAGES=true
CONCURRENT_MESSAGE_MAX=2
LIMIT_MESSAGE_IP=true
MESSAGE_IP_MAX=40
MESSAGE_IP_WINDOW=1
LIMIT_MESSAGE_USER=false
MESSAGE_USER_MAX=40
MESSAGE_USER_WINDOW=1
ILLEGAL_MODEL_REQ_SCORE=5
SEARCH=false
MEILI_NO_ANALYTICS=true
MEILI_HOST=http://0.0.0.0:7700
CONSOLE_JSON=false
DEBUG_LOGGING=true
DEBUG_CONSOLE=false
DEBUG_PLUGINS=true
DEBUG_OPENAI=false
OPENAI_MODERATION=false
VITE_SHOW_FORK=true
RAG_API_URL=http://rag_api:8000
RAG_PORT=8000

# =============================================================================
# SENSITIVE CONFIGURATION (from secrets)
# =============================================================================

OPENAI_API_KEY=${OPENAI_API_KEY}
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
GOOGLE_KEY=${GOOGLE_KEY}
XAI_API_KEY=${XAI_API_KEY}
PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
SERPER_API_KEY=${SERPER_API_KEY}
FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
JINA_API_KEY=${JINA_API_KEY}
STT_API_KEY=${STT_API_KEY}
TTS_API_KEY=${TTS_API_KEY}
JWT_SECRET=${JWT_SECRET}
JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
CREDS_KEY=${CREDS_KEY}
CREDS_IV=${CREDS_IV}
MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
DOMAIN_CLIENT=${DOMAIN_CLIENT}
DOMAIN_SERVER=${DOMAIN_SERVER}
ASSISTANTS_API_KEY=${ASSISTANTS_API_KEY}
OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
LIBRECHAT_CODE_API_KEY=${LIBRECHAT_CODE_API_KEY}
ANYSCALE_API_KEY=${ANYSCALE_API_KEY}
APIPIE_API_KEY=${APIPIE_API_KEY}
COHERE_API_KEY=${COHERE_API_KEY}
DATABRICKS_API_KEY=${DATABRICKS_API_KEY}
FIREWORKS_API_KEY=${FIREWORKS_API_KEY}
GROQ_API_KEY=${GROQ_API_KEY}
HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
MISTRAL_API_KEY=${MISTRAL_API_KEY}
OPENROUTER_KEY=${OPENROUTER_KEY}
SHUTTLEAI_API_KEY=${SHUTTLEAI_API_KEY}
TOGETHERAI_API_KEY=${TOGETHERAI_API_KEY}
UNIFY_API_KEY=${UNIFY_API_KEY}
EOF
          fi
          echo "🔍 Verifying generated configuration..."
          echo "Generated .env file contains:"
          grep -E "OPENAI_MODELS|ANTHROPIC_MODELS|GOOGLE_MODELS|ENDPOINTS" .env || echo "Model configs not found in .env"
          echo "LibreChat YAML file exists:"
          ls -la librechat.yaml || echo "librechat.yaml not found"
          echo "🔄 Stopping services..."
          docker compose down
          echo "🔨 Building and starting services..."
          docker compose build
          docker compose up -d
          echo "⏳ Waiting for services to start..."
          sleep 30
          echo "🔍 Checking running containers..."
          docker compose ps
          echo "🔍 Verifying environment variables in container..."
          docker compose exec -T api printenv | grep -E "OPENAI_MODELS|ANTHROPIC_MODELS|GOOGLE_MODELS|ENDPOINTS" || echo "Environment variables not found in container"
          echo "🔍 Checking recent logs..."
          docker compose logs --tail=50 api
          echo "✅ Deployment complete!"
