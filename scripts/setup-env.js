#!/usr/bin/env node

/**
 * Local Development Environment Setup
 * This script helps developers set up their local .env file from .env.example
 * It preserves existing values and only prompts for missing ones
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { secretKeys } = require('../config/env-template');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

function parseEnvFile(filePath) {
  if (!fs.existsSync(filePath)) {
    return {};
  }
  
  const content = fs.readFileSync(filePath, 'utf8');
  const env = {};
  
  content.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        env[key] = valueParts.join('=');
      }
    }
  });
  
  return env;
}

async function setupEnvironment() {
  console.log('üîß LibreChat Environment Setup');
  console.log('=====================================');
  console.log('');
  
  const envExamplePath = path.join(process.cwd(), '.env.example');
  const envPath = path.join(process.cwd(), '.env');
  
  if (!fs.existsSync(envExamplePath)) {
    console.error('‚ùå .env.example file not found!');
    process.exit(1);
  }
  
  // Read existing .env if it exists
  const existingEnv = parseEnvFile(envPath);
  const exampleEnv = parseEnvFile(envExamplePath);
  
  console.log('This script will help you set up your local .env file.');
  console.log('You can press Enter to skip optional fields or keep existing values.');
  console.log('');
  
  const newEnv = { ...exampleEnv };
  
  // Handle sensitive keys that need user input
  const sensitiveKeysToPrompt = secretKeys.filter(key => 
    key.includes('API_KEY') || key.includes('SECRET') || key.includes('KEY')
  );
  
  for (const key of sensitiveKeysToPrompt) {
    const existingValue = existingEnv[key];
    const exampleValue = exampleEnv[key];
    
    if (existingValue && existingValue !== exampleValue) {
      console.log(`‚úÖ ${key}: Using existing value`);
      newEnv[key] = existingValue;
    } else {
      const prompt = `üîë Enter ${key} (press Enter to skip): `;
      const value = await question(prompt);
      
      if (value.trim()) {
        newEnv[key] = value.trim();
      } else if (existingValue) {
        newEnv[key] = existingValue;
      }
    }
  }
  
  // Handle domain configuration for local development
  console.log('');
  console.log('üåê Domain Configuration:');
  
  const domainClient = existingEnv.DOMAIN_CLIENT || 'http://localhost:3080';
  const domainServer = existingEnv.DOMAIN_SERVER || 'http://localhost:3080';
  
  const newDomainClient = await question(`Enter DOMAIN_CLIENT [${domainClient}]: `);
  const newDomainServer = await question(`Enter DOMAIN_SERVER [${domainServer}]: `);
  
  newEnv.DOMAIN_CLIENT = newDomainClient.trim() || domainClient;
  newEnv.DOMAIN_SERVER = newDomainServer.trim() || domainServer;
  
  // Generate the .env file content
  const envLines = [];
  envLines.push('# =============================================================================');
  envLines.push('# LibreChat Local Development Environment');
  envLines.push('# Generated by setup script - you can edit this file');
  envLines.push('# =============================================================================');
  envLines.push('');
  
  Object.entries(newEnv).forEach(([key, value]) => {
    envLines.push(`${key}=${value}`);
  });
  
  // Write the .env file
  fs.writeFileSync(envPath, envLines.join('\n'));
  
  console.log('');
  console.log('‚úÖ .env file created successfully!');
  console.log(`üìç Location: ${envPath}`);
  console.log('');
  console.log('üöÄ You can now start LibreChat with:');
  console.log('   npm run dev');
  console.log('   or');
  console.log('   docker compose up');
  console.log('');
  console.log('üí° To update your configuration later, you can:');
  console.log('   - Edit the .env file directly');
  console.log('   - Run this script again');
  console.log('');
  
  rl.close();
}

// Run the setup
if (require.main === module) {
  setupEnvironment().catch(console.error);
}

module.exports = { setupEnvironment };
